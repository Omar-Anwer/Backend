nvm install 16
nvm use 16
node -v
---------
npm init
npm init -y (defaults)
-------
npm install -g yarn
npm install -g nodemon

npm i -g typescript
tsc -v
tsc -w index.ts (watch mode)
--------
nodemon .\index.js

npm install (remove node_modules then remove package-lock.json)
npm uninstall xxx
npm outdated
npm update

------------------------------
(dependencies)
npm i --save mongoose
npm i --save dotenv
npm i --save express@4.17.1
--------------
(dev dependencies) (-D or --save-dev)
npm i --save-dev nodemon

npm i --save-dev prettier@2.5.1
npm i --save-dev eslint@8.8.0
npm i --save-dev eslint-config-prettier@8.3.0
npm i --save-dev eslint-plugin-prettier@4.0.0

-------------------------------
(Testing)
npm i --save-dev jasmine 
npm i --save-dev jasmine-spec-reporter
npm i --save-dev supertest

-------------------------------

npm i --save-dev typescript
npm i --save-dev ts-node 
npm i --save-dev @types/node
npm i --save-dev @types/express
npm i --save-dev @types/jasmine
npm i --save-dev @types/supertest
****npm i --save-dev @typescript-eslint/eslint-plugin@4.6.1
****npm i --save-dev @typescript-eslint/parser@4.6.1
---------------------------------------
prettier

{
  "semi": true,
  "singleQuote": true,
  "trailingComma": "es5",
  "printWidth": 80,
  "tabWidth": 2
}

---------------------------------------
package.js

"scripts": {
  "start": "node dist/server.js",
  "build": "tsc",
  "lint": "eslint . --ext .js,.ts",
  "lint:fix": "eslint . --ext .js,.ts --fix",
  "format": "prettier --write ."
}

---------------------------------------
tsconfig.js

{
  "compilerOptions": {
    "target": "es5",
    "lib": ["ES6", "DOM"],
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true,
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "./dist", "spec"]
}

----------------------------------------

npm audit fix
-----------
npx eslint --init
npx tsc --init 
npx jasmine --init
-----------
npm run prettier
npm run lint
npm run build 
npm run start or (npm run dev)

node build/main node build/.
=======================================
project/
│
├── dist/                          # Production folder (output from transpiled src/.ts files)
│
├── spec                           # Jasmine specific configuration
│      └── support
│           └── jasmine.json
│
├── src/                           # Main application source code
│   ├── controllers/               # Route handlers (business logic)
│   │   └── userController.js
│   │
│   ├──── models/                  # Database models/schema definitions
│   │     └── userModel.js
│   │
│   ├──── routes/
│   │     └── userRoutes.js        # API routes
│   │
│   ├──── services/
│   │     └── userService.js       # Service layer (business-specific logic)
│   │
│   ├──── middlewares/             # Custom middleware
│   │      ├── errorMiddleware.js
│   │      └── asyncHandler.js
│   │
│   ├──── utils/                   # Utility functions/helpers
│   │     ├── logger.js 
│   │     ├── fileHandler.js       # Text file handling module
│   │     └── validation.js
│   │
│   ├──── tests                    # Test cases (unit, integration, etc.)
│   │     ├── helpers
│   │     │      └── reporter.ts
│   │     └── xxxSpec.ts
│   │
│   │
│   ├──── app.js                   # Express app initialization
│   │
│   └──── server.js                # Entry point, server configuration
│
├── config/                        # Configuration files (e.g., environment, DB, etc.)
│   └── db.js
│
├── tests/                         # Test cases (unit, integration, etc.)
│
├── public/                        # Public assets (e.g., images, static files)
│
├── .env                           # Environment variables
│
├── package.json                   # Node.js project metadata
│
└── README.md                      # Project documentation