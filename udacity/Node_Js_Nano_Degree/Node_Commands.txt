nvm install 16
nvm use 16
node -v
---------
npm init
npm init -y (defaults)
-------
npm install -g yarn
npm install -g nodemon

npm i -g typescript
tsc -v
tsc -w index.ts (watch mode)
--------
nodemon .\index.js

npm install or npm i 
npm i package-name@latest or npm i package-name@1.1.1
npm uninstall xxx
npm outdated
npm update
npm audit fix

// reintsall node modules
rm -rf node_modules package-lock.json && npm install

------------------------------
(dependencies)

npm i --save express@4.17.1
npm i --save sharp@0.32.0
npm i --save lodash

npm i --save dotenv
npm i --save mongoose


--------------
(dev dependencies) (-D or --save-dev)

npm i --save-dev nodemon

npm i --save-dev prettier@2.5.1
npm i --save-dev eslint@8.8.0
npm i --save-dev eslint-config-prettier@8.3.0 eslint-plugin-prettier@4.0.0
npm i --save-dev eslint-plugin-node

npm i --save-dev @typescript-eslint/eslint-plugin@5.59.11 @typescript-eslint/parser@5.59.11

-------------------------------
(Testing)

npm i --save-dev jasmine jasmine-spec-reporter supertest
npm i --save-dev @types/jasmine @types/supertest

-------------------------------
(typescript)

npm i --save-dev typescript
npm i --save-dev ts-node 
npm i --save-dev @types/node
npm i --save-dev @types/express

3rd-part
--------
npm i --save-dev @types/package-name or npm i --save-dev @typescript/package-name

npm i --save-dev @types/lodash

---------------------------------------
prettier

{
  "semi": true,
  "singleQuote": true,
  "trailingComma": "es5",
  "printWidth": 80,
  "tabWidth": 2
}

---------------------------------------
package.js

"scripts": {
  "start": "node dist/server.js",
  "build": "tsc",
  "lint": "eslint . --ext .js,.ts",
  "lint:fix": "eslint . --ext .js,.ts --fix",
  "format": "prettier --write ."
}

---------------------------------------
tsconfig.js

{
  "compilerOptions": {
    "target": "es5",
    "lib": ["ES6", "DOM"],
    "module": "commonjs",
    "strict": true,
    "noImplicitAny": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true,
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "./dist", "spec"]
}

target: Enables the specification of the target JavaScript version that the compiler will output
module: Facilitates the utilization of a module manager in the compiled JavaScript code. CommonJS is supported and is a standard in Node.js
strict: Toggles strict type-checking protocols
esModuleInterop: Enables the compilation of ES6 modules to CommonJS modules
skipLibCheck: When set to true, bypasses the type checking of default library declaration files
forceConsistentCasingInFileNames: When set to true, enforces case-sensitive file naming

----------------------------------------
(node package executer)

npx eslint --init
npx jasmine init
npx tsc --init 

-----------
npm run prettier
npm run lint
npm run build
npm run test
npm run start (production) or npm run dev (dev)

node build/main node build/.
=======================================
project/
│
├── dist/                          # Production folder (output from transpiled src/.ts files)
│
├── spec                           # Jasmine specific configuration
│      └── support
│           └── jasmine.json
│
├── src/                           # Main application source code
│   ├── controllers/               # Route handlers (business logic)
│   │   └── userController.js
│   │
│   ├──── models/                  # Database models/schema definitions
│   │     └── userModel.js
│   │
│   ├──── routes/
│   │     └── userRoutes.js        # API routes
│   │
│   ├──── services/
│   │     └── userService.js       # Service layer (business-specific logic)
│   │
│   ├──── middlewares/             # Custom middleware
│   │      ├── errorMiddleware.js
│   │      └── asyncHandler.js
│   │
│   ├──── utils/                   # Utility functions/helpers
│   │     ├── logger.js 
│   │     ├── fileHandler.js       # Text file handling module
│   │     └── validation.js
│   │
│   ├──── tests                    # Test cases (unit, integration, etc.)
│   │     ├── helpers
│   │     │      └── reporter.ts
│   │     └── xxxSpec.ts
│   │
│   ├──── app.js                   # Express app initialization
│   │
│   └──── server.js                # Entry point, server configuration
│
├── config/                        # Configuration files (e.g., environment, DB, etc.)
│   └── db.js
│
├── public/                        # Public assets (e.g., images, static files)
│
├── .env                           # Environment variables
│
├── package.json                   # Node.js project metadata
│
└── README.md                      # Project documentation
=======================================================================